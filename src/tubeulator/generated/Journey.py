import json
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard, LoadMeta
from dataclass_wizard.loaders import fromdict
import jsonschema

@dataclass
class ModeDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Mode
    """
    isTflService: bool = None
    isFarePaying: bool = None
    isScheduledService: bool = None
    modeName: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(ModeDeserialiser)


@dataclass
class PathAttributeDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.PathAttribute
    """
    name: str = None
    value: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PathAttributeDeserialiser)


@dataclass
class InstructionStepDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.InstructionStep
    """
    description: str = None
    turnDirection: str = None
    streetName: str = None
    distance: int = None
    cumulativeDistance: int = None
    skyDirection: int = None
    skyDirectionDescription: str = None
    cumulativeTravelTime: int = None
    latitude: Any = None
    longitude: Any = None
    pathAttribute: dict = None
    descriptionHeading: str = None
    trackType: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(InstructionStepDeserialiser)


@dataclass
class InstructionDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Instruction
    """
    summary: str = None
    detailed: str = None
    steps: list[dict] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(InstructionDeserialiser)


@dataclass
class ObstacleDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Obstacle
    """
    type: str = None
    incline: str = None
    stopId: int = None
    position: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(ObstacleDeserialiser)


@dataclass
class PointDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Point
    """
    lat: Any = None
    lon: Any = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PointDeserialiser)


@dataclass
class PassengerFlowDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.PassengerFlow
    """
    timeSlice: str = None
    value: int = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PassengerFlowDeserialiser)


@dataclass
class TrainLoadingDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.TrainLoading
    """
    line: str = None
    lineDirection: str = None
    platformDirection: str = None
    direction: str = None
    naptanTo: str = None
    timeSlice: str = None
    value: int = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(TrainLoadingDeserialiser)


@dataclass
class CrowdingDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Crowding
    """
    passengerFlows: list[dict] = field(default_factory=list)
    trainLoadings: list[dict] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(CrowdingDeserialiser)


@dataclass
class IdentifierDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Identifier
    """
    id: str = None
    name: str = None
    uri: str = None
    fullName: str = None
    type: str = None
    crowding: dict = None
    routeType: str = None
    status: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(IdentifierDeserialiser)


@dataclass
class JpElevationDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Common.JourneyPlanner.JpElevation
    """
    distance: int = None
    startLat: Any = None
    startLon: Any = None
    endLat: Any = None
    endLon: Any = None
    heightFromPreviousPoint: int = None
    gradient: Any = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(JpElevationDeserialiser)


@dataclass
class PathDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Path
    """
    lineString: str = None
    stopPoints: list[dict] = field(default_factory=list)
    elevation: list[dict] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PathDeserialiser)


@dataclass
class RouteOptionDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.RouteOption
    """
    id: str = None
    name: str = None
    directions: list[str] = field(default_factory=list)
    lineIdentifier: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(RouteOptionDeserialiser)


@dataclass
class LineGroupDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineGroup
    """
    naptanIdReference: str = None
    stationAtcoCode: str = None
    lineIdentifier: list[str] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineGroupDeserialiser)


@dataclass
class LineModeGroupDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineModeGroup
    """
    modeName: str = None
    lineIdentifier: list[str] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineModeGroupDeserialiser)


@dataclass
class AdditionalPropertiesDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.AdditionalProperties
    """
    category: str = None
    key: str = None
    sourceSystemKey: str = None
    value: str = None
    modified: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(AdditionalPropertiesDeserialiser)


@dataclass
class PlaceDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Place
    """
    id: str = None
    url: str = None
    commonName: str = None
    distance: Any = None
    placeType: str = None
    additionalProperties: list[dict] = field(default_factory=list)
    children: list[dict] = field(default_factory=list)
    childrenUrls: list[str] = field(default_factory=list)
    lat: Any = None
    lon: Any = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PlaceDeserialiser)


@dataclass
class StopPointDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.StopPoint
    """
    naptanId: str = None
    platformName: str = None
    indicator: str = None
    stopLetter: str = None
    modes: list[str] = field(default_factory=list)
    icsCode: str = None
    smsCode: str = None
    stopType: str = None
    stationNaptan: str = None
    accessibilitySummary: str = None
    hubNaptanCode: str = None
    lines: list[dict] = field(default_factory=list)
    lineGroup: list[dict] = field(default_factory=list)
    lineModeGroups: list[dict] = field(default_factory=list)
    fullName: str = None
    naptanMode: str = None
    status: bool = None
    id: str = None
    url: str = None
    commonName: str = None
    distance: Any = None
    placeType: str = None
    additionalProperties: list[dict] = field(default_factory=list)
    children: list[dict] = field(default_factory=list)
    childrenUrls: list[str] = field(default_factory=list)
    lat: Any = None
    lon: Any = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(StopPointDeserialiser)


@dataclass
class RouteSectionNaptanEntrySequenceDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence
    """
    ordinal: int = None
    stopPoint: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(RouteSectionNaptanEntrySequenceDeserialiser)


@dataclass
class RouteSectionDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.RouteSection
    """
    id: str = None
    lineId: str = None
    routeCode: str = None
    name: str = None
    lineString: str = None
    direction: str = None
    originationName: str = None
    destinationName: str = None
    validTo: str = None
    validFrom: str = None
    routeSectionNaptanEntrySequence: list[dict] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(RouteSectionDeserialiser)


@dataclass
class DisruptionDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Disruption
    """
    category: str = None
    type: str = None
    categoryDescription: str = None
    description: str = None
    summary: str = None
    additionalInfo: str = None
    created: str = None
    lastUpdate: str = None
    affectedRoutes: list[dict] = field(default_factory=list)
    affectedStops: list[dict] = field(default_factory=list)
    closureText: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(DisruptionDeserialiser)


@dataclass
class PlannedWorkDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.PlannedWork
    """
    id: str = None
    description: str = None
    createdDateTime: str = None
    lastUpdateDateTime: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PlannedWorkDeserialiser)


@dataclass
class LegDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Leg
    """
    duration: int = None
    speed: str = None
    instruction: dict = None
    obstacles: list[dict] = field(default_factory=list)
    departureTime: str = None
    arrivalTime: str = None
    departurePoint: dict = None
    arrivalPoint: dict = None
    path: dict = None
    routeOptions: list[dict] = field(default_factory=list)
    mode: dict = None
    disruptions: list[dict] = field(default_factory=list)
    plannedWorks: list[dict] = field(default_factory=list)
    distance: Any = None
    isDisrupted: bool = None
    hasFixedLocations: bool = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LegDeserialiser)


@dataclass
class FareTapDetailsDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.FareTapDetails
    """
    modeType: str = None
    validationType: str = None
    hostDeviceType: str = None
    busRouteId: str = None
    nationalLocationCode: int = None
    tapTimestamp: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(FareTapDetailsDeserialiser)


@dataclass
class FareTapDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.FareTap
    """
    atcoCode: str = None
    tapDetails: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(FareTapDeserialiser)


@dataclass
class FareDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Fare
    """
    lowZone: int = None
    highZone: int = None
    cost: int = None
    chargeProfileName: str = None
    isHopperFare: bool = None
    chargeLevel: str = None
    peak: int = None
    offPeak: int = None
    taps: list[dict] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(FareDeserialiser)


@dataclass
class FareCaveatDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.FareCaveat
    """
    text: str = None
    type: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(FareCaveatDeserialiser)


@dataclass
class JourneyFareDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare
    """
    totalCost: int = None
    fares: list[dict] = field(default_factory=list)
    caveats: list[dict] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(JourneyFareDeserialiser)


@dataclass
class JourneyDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Journey
    """
    startDateTime: str = None
    duration: int = None
    arrivalDateTime: str = None
    legs: list[dict] = field(default_factory=list)
    fare: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(JourneyDeserialiser)


@dataclass
class ValidityPeriodDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.ValidityPeriod
    """
    fromDate: str = None
    toDate: str = None
    isNow: bool = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(ValidityPeriodDeserialiser)


@dataclass
class LineStatusDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineStatus
    """
    id: int = None
    lineId: str = None
    statusSeverity: int = None
    statusSeverityDescription: str = None
    reason: str = None
    created: str = None
    modified: str = None
    validityPeriods: list[dict] = field(default_factory=list)
    disruption: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineStatusDeserialiser)


@dataclass
class MatchedRouteDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.MatchedRoute
    """
    routeCode: str = None
    name: str = None
    direction: str = None
    originationName: str = None
    destinationName: str = None
    originator: str = None
    destination: str = None
    serviceType: str = None
    validTo: str = None
    validFrom: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(MatchedRouteDeserialiser)


@dataclass
class LineServiceTypeInfoDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineServiceTypeInfo
    """
    name: str = None
    uri: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineServiceTypeInfoDeserialiser)


@dataclass
class LineDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Line
    """
    id: str = None
    name: str = None
    modeName: str = None
    disruptions: list[dict] = field(default_factory=list)
    created: str = None
    modified: str = None
    lineStatuses: list[dict] = field(default_factory=list)
    routeSections: list[dict] = field(default_factory=list)
    serviceTypes: list[dict] = field(default_factory=list)
    crowding: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineDeserialiser)


@dataclass
class JourneyPlannerCycleHireDockingStationDataDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyPlannerCycleHireDockingStationData
    """
    originNumberOfBikes: int = None
    destinationNumberOfBikes: int = None
    originNumberOfEmptySlots: int = None
    destinationNumberOfEmptySlots: int = None
    originId: str = None
    destinationId: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(JourneyPlannerCycleHireDockingStationDataDeserialiser)


@dataclass
class TimeAdjustmentDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment
    """
    date: str = None
    time: str = None
    timeIs: str = None
    uri: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(TimeAdjustmentDeserialiser)


@dataclass
class TimeAdjustmentsDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustments
    """
    earliest: dict = None
    earlier: dict = None
    later: dict = None
    latest: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(TimeAdjustmentsDeserialiser)


@dataclass
class SearchCriteriaDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria
    """
    dateTime: str = None
    dateTimeType: str = None
    timeAdjustments: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(SearchCriteriaDeserialiser)


@dataclass
class JourneyVectorDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector
    """
    from: str = None
    to: str = None
    via: str = None
    uri: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(JourneyVectorDeserialiser)


@dataclass
class ItineraryResultDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult
    """
    journeys: list[dict] = field(default_factory=list)
    lines: list[dict] = field(default_factory=list)
    cycleHireDockingStationData: dict = None
    stopMessages: list[str] = field(default_factory=list)
    recommendedMaxAgeMinutes: int = None
    searchCriteria: dict = None
    journeyVector: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(ItineraryResultDeserialiser)


@dataclass
class MetaModesGet200ApplicationJsonResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::MetaModesGet200ApplicationJsonResponse
    """
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(MetaModesGet200ApplicationJsonResponseDeserialiser)


@dataclass
class Get200ApplicationJsonResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Get200ApplicationJsonResponse
    """
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(Get200ApplicationJsonResponseDeserialiser)
