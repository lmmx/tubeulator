import json
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard
from dataclass_wizard.loaders import fromdict
import jsonschema
from ..utils.paths import load_endpoint_component_schemas, DtoEnum

@dataclass
class Mode(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Mode
    """
    IsTflService: bool = None
    IsFarePaying: bool = None
    IsScheduledService: bool = None
    ModeName: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class PathAttribute(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.PathAttribute
    """
    Name: str = None
    Value: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-2'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class InstructionStep(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.InstructionStep
    """
    Description: str = None
    TurnDirection: str = None
    StreetName: str = None
    Distance: int = None
    CumulativeDistance: int = None
    SkyDirection: int = None
    SkyDirectionDescription: str = None
    CumulativeTravelTime: int = None
    Latitude: float = None
    Longitude: float = None
    PathAttribute: dict = None
    DescriptionHeading: str = None
    TrackType: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-3'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Instruction(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Instruction
    """
    Summary: str = None
    Detailed: str = None
    Steps: list[InstructionStep] = field(default_factory=list)
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-4'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Obstacle(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Obstacle
    """
    Type: str = None
    Incline: str = None
    StopId: int = None
    Position: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-5'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Point(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Point
    """
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-6'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class PassengerFlow(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.PassengerFlow
    """
    TimeSlice: str = None
    Value: int = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-7'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TrainLoading(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.TrainLoading
    """
    Line: str = None
    LineDirection: str = None
    PlatformDirection: str = None
    Direction: str = None
    NaptanTo: str = None
    TimeSlice: str = None
    Value: int = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-8'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Crowding(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Crowding
    """
    PassengerFlows: list[PassengerFlow] = field(default_factory=list)
    TrainLoadings: list[TrainLoading] = field(default_factory=list)
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-9'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Identifier(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Identifier
    """
    Id: str = None
    Name: str = None
    Uri: str = None
    FullName: str = None
    Type: str = None
    Crowding: dict = None
    RouteType: str = None
    Status: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-10'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class JpElevation(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Common.JourneyPlanner.JpElevation
    """
    Distance: int = None
    StartLat: float = None
    StartLon: float = None
    EndLat: float = None
    EndLon: float = None
    HeightFromPreviousPoint: int = None
    Gradient: float = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-11'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Path(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Path
    """
    LineString: str = None
    StopPoints: list[Identifier] = field(default_factory=list)
    Elevation: list[JpElevation] = field(default_factory=list)
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-12'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class RouteOption(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.RouteOption
    """
    Id: str = None
    Name: str = None
    Directions: list[str] = field(default_factory=list)
    LineIdentifier: dict = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-13'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineGroup(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineGroup
    """
    NaptanIdReference: str = None
    StationAtcoCode: str = None
    LineIdentifier: list[str] = field(default_factory=list)
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-14'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineModeGroup(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineModeGroup
    """
    ModeName: str = None
    LineIdentifier: list[str] = field(default_factory=list)
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-15'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class AdditionalProperties(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.AdditionalProperties
    """
    Category: str = None
    Key: str = None
    SourceSystemKey: str = None
    Value: str = None
    Modified: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-16'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Place(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Place
    """
    Id: str = None
    Url: str = None
    CommonName: str = None
    Distance: float = None
    PlaceType: str = None
    AdditionalProperties: list[AdditionalProperties] = field(default_factory=list)
    Children: list[Place] = field(default_factory=list)
    ChildrenUrls: list[str] = field(default_factory=list)
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-17'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class StopPoint(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.StopPoint
    """
    NaptanId: str = None
    PlatformName: str = None
    Indicator: str = None
    StopLetter: str = None
    Modes: list[str] = field(default_factory=list)
    IcsCode: str = None
    SmsCode: str = None
    StopType: str = None
    StationNaptan: str = None
    AccessibilitySummary: str = None
    HubNaptanCode: str = None
    Lines: list[Identifier] = field(default_factory=list)
    LineGroup: list[LineGroup] = field(default_factory=list)
    LineModeGroups: list[LineModeGroup] = field(default_factory=list)
    FullName: str = None
    NaptanMode: str = None
    Status: bool = None
    Id: str = None
    Url: str = None
    CommonName: str = None
    Distance: float = None
    PlaceType: str = None
    AdditionalProperties: list[AdditionalProperties] = field(default_factory=list)
    Children: list[Place] = field(default_factory=list)
    ChildrenUrls: list[str] = field(default_factory=list)
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-18'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class RouteSectionNaptanEntrySequence(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence
    """
    Ordinal: int = None
    StopPoint: dict = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-19'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class RouteSection(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.RouteSection
    """
    Id: str = None
    LineId: str = None
    RouteCode: str = None
    Name: str = None
    LineString: str = None
    Direction: str = None
    OriginationName: str = None
    DestinationName: str = None
    ValidTo: str = None
    ValidFrom: str = None
    RouteSectionNaptanEntrySequence: list[RouteSectionNaptanEntrySequence] = field(default_factory=list)
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-20'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Disruption(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Disruption
    """
    Category: str = None
    Type: str = None
    CategoryDescription: str = None
    Description: str = None
    Summary: str = None
    AdditionalInfo: str = None
    Created: str = None
    LastUpdate: str = None
    AffectedRoutes: list[RouteSection] = field(default_factory=list)
    AffectedStops: list[StopPoint] = field(default_factory=list)
    ClosureText: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-21'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class PlannedWork(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.PlannedWork
    """
    Id: str = None
    Description: str = None
    CreatedDateTime: str = None
    LastUpdateDateTime: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-22'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Leg(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Leg
    """
    Duration: int = None
    Speed: str = None
    Instruction: dict = None
    Obstacles: list[Obstacle] = field(default_factory=list)
    DepartureTime: str = None
    ArrivalTime: str = None
    DeparturePoint: dict = None
    ArrivalPoint: dict = None
    Path: dict = None
    RouteOptions: list[RouteOption] = field(default_factory=list)
    Mode: dict = None
    Disruptions: list[Disruption] = field(default_factory=list)
    PlannedWorks: list[PlannedWork] = field(default_factory=list)
    Distance: float = None
    IsDisrupted: bool = None
    HasFixedLocations: bool = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-23'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class FareTapDetails(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.FareTapDetails
    """
    ModeType: str = None
    ValidationType: str = None
    HostDeviceType: str = None
    BusRouteId: str = None
    NationalLocationCode: int = None
    TapTimestamp: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-24'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class FareTap(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.FareTap
    """
    AtcoCode: str = None
    TapDetails: dict = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-25'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Fare(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Fare
    """
    LowZone: int = None
    HighZone: int = None
    Cost: int = None
    ChargeProfileName: str = None
    IsHopperFare: bool = None
    ChargeLevel: str = None
    Peak: int = None
    OffPeak: int = None
    Taps: list[FareTap] = field(default_factory=list)
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-26'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class FareCaveat(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.FareCaveat
    """
    Text: str = None
    Type: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-27'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class JourneyFare(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare
    """
    TotalCost: int = None
    Fares: list[Fare] = field(default_factory=list)
    Caveats: list[FareCaveat] = field(default_factory=list)
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-28'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Journey(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Journey
    """
    StartDateTime: str = None
    Duration: int = None
    ArrivalDateTime: str = None
    Legs: list[Leg] = field(default_factory=list)
    Fare: dict = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-29'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ValidityPeriod(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.ValidityPeriod
    """
    FromDate: str = None
    ToDate: str = None
    IsNow: bool = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-30'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineStatus(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineStatus
    """
    Id: int = None
    LineId: str = None
    StatusSeverity: int = None
    StatusSeverityDescription: str = None
    Reason: str = None
    Created: str = None
    Modified: str = None
    ValidityPeriods: list[ValidityPeriod] = field(default_factory=list)
    Disruption: dict = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-31'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MatchedRoute(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.MatchedRoute
    """
    RouteCode: str = None
    Name: str = None
    Direction: str = None
    OriginationName: str = None
    DestinationName: str = None
    Originator: str = None
    Destination: str = None
    ServiceType: str = None
    ValidTo: str = None
    ValidFrom: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-32'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineServiceTypeInfo(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineServiceTypeInfo
    """
    Name: str = None
    Uri: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-33'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Line(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Line
    """
    Id: str = None
    Name: str = None
    ModeName: str = None
    Disruptions: list[Disruption] = field(default_factory=list)
    Created: str = None
    Modified: str = None
    LineStatuses: list[LineStatus] = field(default_factory=list)
    RouteSections: list[MatchedRoute] = field(default_factory=list)
    ServiceTypes: list[LineServiceTypeInfo] = field(default_factory=list)
    Crowding: dict = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-34'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class JourneyPlannerCycleHireDockingStationData(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyPlannerCycleHireDockingStationData
    """
    OriginNumberOfBikes: int = None
    DestinationNumberOfBikes: int = None
    OriginNumberOfEmptySlots: int = None
    DestinationNumberOfEmptySlots: int = None
    OriginId: str = None
    DestinationId: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-35'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TimeAdjustment(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment
    """
    Date: str = None
    Time: str = None
    TimeIs: str = None
    Uri: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-36'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TimeAdjustments(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustments
    """
    Earliest: dict = None
    Earlier: dict = None
    Later: dict = None
    Latest: dict = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-37'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class SearchCriteria(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria
    """
    DateTime: str = None
    DateTimeType: str = None
    TimeAdjustments: dict = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-38'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class JourneyVector(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector
    """
    From: str = None
    To: str = None
    Via: str = None
    Uri: str = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-39'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ItineraryResult(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult
    """
    Journeys: list[Journey] = field(default_factory=list)
    Lines: list[Line] = field(default_factory=list)
    CycleHireDockingStationData: dict = None
    StopMessages: list[str] = field(default_factory=list)
    RecommendedMaxAgeMinutes: int = None
    SearchCriteria: dict = None
    JourneyVector: dict = None
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Tfl-40'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MetaModesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Journey::MetaModesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'MetaModesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Get200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Journey::Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Journey'
    _component_schema_name: str = 'Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


class Deserialisers(DtoEnum):
    Tfl = Mode
    Tfl_2 = PathAttribute
    Tfl_3 = InstructionStep
    Tfl_4 = Instruction
    Tfl_5 = Obstacle
    Tfl_6 = Point
    Tfl_7 = PassengerFlow
    Tfl_8 = TrainLoading
    Tfl_9 = Crowding
    Tfl_10 = Identifier
    Tfl_11 = JpElevation
    Tfl_12 = Path
    Tfl_13 = RouteOption
    Tfl_14 = LineGroup
    Tfl_15 = LineModeGroup
    Tfl_16 = AdditionalProperties
    Tfl_17 = Place
    Tfl_18 = StopPoint
    Tfl_19 = RouteSectionNaptanEntrySequence
    Tfl_20 = RouteSection
    Tfl_21 = Disruption
    Tfl_22 = PlannedWork
    Tfl_23 = Leg
    Tfl_24 = FareTapDetails
    Tfl_25 = FareTap
    Tfl_26 = Fare
    Tfl_27 = FareCaveat
    Tfl_28 = JourneyFare
    Tfl_29 = Journey
    Tfl_30 = ValidityPeriod
    Tfl_31 = LineStatus
    Tfl_32 = MatchedRoute
    Tfl_33 = LineServiceTypeInfo
    Tfl_34 = Line
    Tfl_35 = JourneyPlannerCycleHireDockingStationData
    Tfl_36 = TimeAdjustment
    Tfl_37 = TimeAdjustments
    Tfl_38 = SearchCriteria
    Tfl_39 = JourneyVector
    Tfl_40 = ItineraryResult
    MetaModesGet200ApplicationJsonResponse = MetaModesGet200ApplicationJsonResponse
    Get200ApplicationJsonResponse = Get200ApplicationJsonResponse