import json
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard, LoadMeta
from dataclass_wizard.loaders import fromdict
import jsonschema


@dataclass
class ModeDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Mode
    """

    IsTflService: bool = None
    IsFarePaying: bool = None
    IsScheduledService: bool = None
    ModeName: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(ModeDeserialiser)


@dataclass
class PathAttributeDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.PathAttribute
    """

    Name: str = None
    Value: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PathAttributeDeserialiser)


@dataclass
class InstructionStepDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.InstructionStep
    """

    Description: str = None
    TurnDirection: str = None
    StreetName: str = None
    Distance: int = None
    CumulativeDistance: int = None
    SkyDirection: int = None
    SkyDirectionDescription: str = None
    CumulativeTravelTime: int = None
    Latitude: Any = None
    Longitude: Any = None
    PathAttribute: dict = None
    DescriptionHeading: str = None
    TrackType: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(InstructionStepDeserialiser)


@dataclass
class InstructionDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Instruction
    """

    Summary: str = None
    Detailed: str = None
    Steps: list[dict] = field(default_factory=list)

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(InstructionDeserialiser)


@dataclass
class ObstacleDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Obstacle
    """

    Type: str = None
    Incline: str = None
    StopId: int = None
    Position: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(ObstacleDeserialiser)


@dataclass
class PointDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Point
    """

    Lat: Any = None
    Lon: Any = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PointDeserialiser)


@dataclass
class PassengerFlowDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.PassengerFlow
    """

    TimeSlice: str = None
    Value: int = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PassengerFlowDeserialiser)


@dataclass
class TrainLoadingDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.TrainLoading
    """

    Line: str = None
    LineDirection: str = None
    PlatformDirection: str = None
    Direction: str = None
    NaptanTo: str = None
    TimeSlice: str = None
    Value: int = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(TrainLoadingDeserialiser)


@dataclass
class CrowdingDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Crowding
    """

    PassengerFlows: list[dict] = field(default_factory=list)
    TrainLoadings: list[dict] = field(default_factory=list)

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(CrowdingDeserialiser)


@dataclass
class IdentifierDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Identifier
    """

    Id: str = None
    Name: str = None
    Uri: str = None
    FullName: str = None
    Type: str = None
    Crowding: dict = None
    RouteType: str = None
    Status: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(IdentifierDeserialiser)


@dataclass
class JpElevationDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Common.JourneyPlanner.JpElevation
    """

    Distance: int = None
    StartLat: Any = None
    StartLon: Any = None
    EndLat: Any = None
    EndLon: Any = None
    HeightFromPreviousPoint: int = None
    Gradient: Any = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(JpElevationDeserialiser)


@dataclass
class PathDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Path
    """

    LineString: str = None
    StopPoints: list[dict] = field(default_factory=list)
    Elevation: list[dict] = field(default_factory=list)

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PathDeserialiser)


@dataclass
class RouteOptionDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.RouteOption
    """

    Id: str = None
    Name: str = None
    Directions: list[str] = field(default_factory=list)
    LineIdentifier: dict = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(RouteOptionDeserialiser)


@dataclass
class LineGroupDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineGroup
    """

    NaptanIdReference: str = None
    StationAtcoCode: str = None
    LineIdentifier: list[str] = field(default_factory=list)

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineGroupDeserialiser)


@dataclass
class LineModeGroupDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineModeGroup
    """

    ModeName: str = None
    LineIdentifier: list[str] = field(default_factory=list)

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineModeGroupDeserialiser)


@dataclass
class AdditionalPropertiesDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.AdditionalProperties
    """

    Category: str = None
    Key: str = None
    SourceSystemKey: str = None
    Value: str = None
    Modified: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(AdditionalPropertiesDeserialiser)


@dataclass
class PlaceDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Place
    """

    Id: str = None
    Url: str = None
    CommonName: str = None
    Distance: Any = None
    PlaceType: str = None
    AdditionalProperties: list[dict] = field(default_factory=list)
    Children: list[dict] = field(default_factory=list)
    ChildrenUrls: list[str] = field(default_factory=list)
    Lat: Any = None
    Lon: Any = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PlaceDeserialiser)


@dataclass
class StopPointDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.StopPoint
    """

    NaptanId: str = None
    PlatformName: str = None
    Indicator: str = None
    StopLetter: str = None
    Modes: list[str] = field(default_factory=list)
    IcsCode: str = None
    SmsCode: str = None
    StopType: str = None
    StationNaptan: str = None
    AccessibilitySummary: str = None
    HubNaptanCode: str = None
    Lines: list[dict] = field(default_factory=list)
    LineGroup: list[dict] = field(default_factory=list)
    LineModeGroups: list[dict] = field(default_factory=list)
    FullName: str = None
    NaptanMode: str = None
    Status: bool = None
    Id: str = None
    Url: str = None
    CommonName: str = None
    Distance: Any = None
    PlaceType: str = None
    AdditionalProperties: list[dict] = field(default_factory=list)
    Children: list[dict] = field(default_factory=list)
    ChildrenUrls: list[str] = field(default_factory=list)
    Lat: Any = None
    Lon: Any = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(StopPointDeserialiser)


@dataclass
class RouteSectionNaptanEntrySequenceDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence
    """

    Ordinal: int = None
    StopPoint: dict = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(
    RouteSectionNaptanEntrySequenceDeserialiser
)


@dataclass
class RouteSectionDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.RouteSection
    """

    Id: str = None
    LineId: str = None
    RouteCode: str = None
    Name: str = None
    LineString: str = None
    Direction: str = None
    OriginationName: str = None
    DestinationName: str = None
    ValidTo: str = None
    ValidFrom: str = None
    RouteSectionNaptanEntrySequence: list[dict] = field(default_factory=list)

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(RouteSectionDeserialiser)


@dataclass
class DisruptionDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Disruption
    """

    Category: str = None
    Type: str = None
    CategoryDescription: str = None
    Description: str = None
    Summary: str = None
    AdditionalInfo: str = None
    Created: str = None
    LastUpdate: str = None
    AffectedRoutes: list[dict] = field(default_factory=list)
    AffectedStops: list[dict] = field(default_factory=list)
    ClosureText: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(DisruptionDeserialiser)


@dataclass
class PlannedWorkDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.PlannedWork
    """

    Id: str = None
    Description: str = None
    CreatedDateTime: str = None
    LastUpdateDateTime: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(PlannedWorkDeserialiser)


@dataclass
class LegDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Leg
    """

    Duration: int = None
    Speed: str = None
    Instruction: dict = None
    Obstacles: list[dict] = field(default_factory=list)
    DepartureTime: str = None
    ArrivalTime: str = None
    DeparturePoint: dict = None
    ArrivalPoint: dict = None
    Path: dict = None
    RouteOptions: list[dict] = field(default_factory=list)
    Mode: dict = None
    Disruptions: list[dict] = field(default_factory=list)
    PlannedWorks: list[dict] = field(default_factory=list)
    Distance: Any = None
    IsDisrupted: bool = None
    HasFixedLocations: bool = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LegDeserialiser)


@dataclass
class FareTapDetailsDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.FareTapDetails
    """

    ModeType: str = None
    ValidationType: str = None
    HostDeviceType: str = None
    BusRouteId: str = None
    NationalLocationCode: int = None
    TapTimestamp: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(FareTapDetailsDeserialiser)


@dataclass
class FareTapDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.FareTap
    """

    AtcoCode: str = None
    TapDetails: dict = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(FareTapDeserialiser)


@dataclass
class FareDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Fare
    """

    LowZone: int = None
    HighZone: int = None
    Cost: int = None
    ChargeProfileName: str = None
    IsHopperFare: bool = None
    ChargeLevel: str = None
    Peak: int = None
    OffPeak: int = None
    Taps: list[dict] = field(default_factory=list)

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(FareDeserialiser)


@dataclass
class FareCaveatDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.FareCaveat
    """

    Text: str = None
    Type: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(FareCaveatDeserialiser)


@dataclass
class JourneyFareDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare
    """

    TotalCost: int = None
    Fares: list[dict] = field(default_factory=list)
    Caveats: list[dict] = field(default_factory=list)

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(JourneyFareDeserialiser)


@dataclass
class JourneyDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.Journey
    """

    StartDateTime: str = None
    Duration: int = None
    ArrivalDateTime: str = None
    Legs: list[dict] = field(default_factory=list)
    Fare: dict = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(JourneyDeserialiser)


@dataclass
class ValidityPeriodDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.ValidityPeriod
    """

    FromDate: str = None
    ToDate: str = None
    IsNow: bool = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(ValidityPeriodDeserialiser)


@dataclass
class LineStatusDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineStatus
    """

    Id: int = None
    LineId: str = None
    StatusSeverity: int = None
    StatusSeverityDescription: str = None
    Reason: str = None
    Created: str = None
    Modified: str = None
    ValidityPeriods: list[dict] = field(default_factory=list)
    Disruption: dict = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineStatusDeserialiser)


@dataclass
class MatchedRouteDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.MatchedRoute
    """

    RouteCode: str = None
    Name: str = None
    Direction: str = None
    OriginationName: str = None
    DestinationName: str = None
    Originator: str = None
    Destination: str = None
    ServiceType: str = None
    ValidTo: str = None
    ValidFrom: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(MatchedRouteDeserialiser)


@dataclass
class LineServiceTypeInfoDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.LineServiceTypeInfo
    """

    Name: str = None
    Uri: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineServiceTypeInfoDeserialiser)


@dataclass
class LineDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.Line
    """

    Id: str = None
    Name: str = None
    ModeName: str = None
    Disruptions: list[dict] = field(default_factory=list)
    Created: str = None
    Modified: str = None
    LineStatuses: list[dict] = field(default_factory=list)
    RouteSections: list[dict] = field(default_factory=list)
    ServiceTypes: list[dict] = field(default_factory=list)
    Crowding: dict = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(LineDeserialiser)


@dataclass
class JourneyPlannerCycleHireDockingStationDataDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyPlannerCycleHireDockingStationData
    """

    OriginNumberOfBikes: int = None
    DestinationNumberOfBikes: int = None
    OriginNumberOfEmptySlots: int = None
    DestinationNumberOfEmptySlots: int = None
    OriginId: str = None
    DestinationId: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(
    JourneyPlannerCycleHireDockingStationDataDeserialiser
)


@dataclass
class TimeAdjustmentDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment
    """

    Date: str = None
    Time: str = None
    TimeIs: str = None
    Uri: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(TimeAdjustmentDeserialiser)


@dataclass
class TimeAdjustmentsDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustments
    """

    Earliest: dict = None
    Earlier: dict = None
    Later: dict = None
    Latest: dict = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(TimeAdjustmentsDeserialiser)


@dataclass
class SearchCriteriaDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria
    """

    DateTime: str = None
    DateTimeType: str = None
    TimeAdjustments: dict = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(SearchCriteriaDeserialiser)


@dataclass
class JourneyVectorDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector
    """

    From: str = None
    To: str = None
    Via: str = None
    Uri: str = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(JourneyVectorDeserialiser)


@dataclass
class ItineraryResultDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult
    """

    Journeys: list[dict] = field(default_factory=list)
    Lines: list[dict] = field(default_factory=list)
    CycleHireDockingStationData: dict = None
    StopMessages: list[str] = field(default_factory=list)
    RecommendedMaxAgeMinutes: int = None
    SearchCriteria: dict = None
    JourneyVector: dict = None

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(ItineraryResultDeserialiser)


@dataclass
class MetaModesGet200ApplicationJsonResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::MetaModesGet200ApplicationJsonResponse
    """

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(
    MetaModesGet200ApplicationJsonResponseDeserialiser
)


@dataclass
class Get200ApplicationJsonResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Journey::Get200ApplicationJsonResponse
    """

    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)


LoadMeta(raise_on_unknown_json_key=True).bind_to(
    Get200ApplicationJsonResponseDeserialiser
)
