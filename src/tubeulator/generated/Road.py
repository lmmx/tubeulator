from __future__ import annotations
import json
from datetime import datetime
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard
from dataclass_wizard.loaders import fromdict
import jsonschema
from ..utils.paths import load_endpoint_component_schemas, DtoEnum

@dataclass
class RoadCorridor(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadCorridor
    """
    Id: str = None
    DisplayName: str = None
    Group: str = None
    StatusSeverity: str = None
    StatusSeverityDescription: str = None
    Bounds: str = None
    Envelope: str = None
    StatusAggregationStartDate: datetime = None
    StatusAggregationEndDate: datetime = None
    Url: str = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Tfl', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class DbGeographyWellKnownValue(JSONWizard):
    """
    Autogenerated from Road::System.Data.Spatial.DbGeographyWellKnownValue
    """
    CoordinateSystemId: int = None
    WellKnownText: str = None
    WellKnownBinary: str = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='System', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class DbGeography(JSONWizard):
    """
    Autogenerated from Road::System.Data.Spatial.DbGeography
    """
    Geography: DbGeographyWellKnownValue = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='System-2', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class StreetSegment(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.StreetSegment
    """
    Toid: str = None
    LineString: str = None
    SourceSystemId: int = None
    SourceSystemKey: str = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Tfl-2', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class Street(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.Street
    """
    Name: str = None
    Closure: str = None
    Directions: str = None
    Segments: list[StreetSegment] = field(default_factory=list)
    SourceSystemId: int = None
    SourceSystemKey: str = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Tfl-3', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class RoadProject(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadProject
    """
    ProjectId: str = None
    SchemeName: str = None
    ProjectName: str = None
    ProjectDescription: str = None
    ProjectPageUrl: str = None
    ConsultationPageUrl: str = None
    ConsultationStartDate: datetime = None
    ConsultationEndDate: datetime = None
    ConstructionStartDate: datetime = None
    ConstructionEndDate: datetime = None
    BoroughsBenefited: list[str] = field(default_factory=list)
    CycleSuperhighwayId: str = None
    Phase: str = None
    ContactName: str = None
    ContactEmail: str = None
    ExternalPageUrl: str = None
    ProjectSummaryPageUrl: str = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Tfl-4', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class RoadDisruptionLine(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadDisruptionLine
    """
    Id: int = None
    RoadDisruptionId: str = None
    IsDiversion: bool = None
    MultiLineString: DbGeography = None
    StartDate: datetime = None
    EndDate: datetime = None
    StartTime: str = None
    EndTime: str = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Tfl-5', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class RoadDisruptionImpactArea(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadDisruptionImpactArea
    """
    Id: int = None
    RoadDisruptionId: str = None
    Polygon: DbGeography = None
    StartDate: datetime = None
    EndDate: datetime = None
    StartTime: str = None
    EndTime: str = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Tfl-6', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class RoadDisruptionSchedule(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadDisruptionSchedule
    """
    StartTime: datetime = None
    EndTime: datetime = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Tfl-7', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class RoadDisruption(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadDisruption
    """
    Id: str = None
    Url: str = None
    Point: str = None
    Severity: str = None
    Ordinal: int = None
    Category: str = None
    SubCategory: str = None
    Comments: str = None
    CurrentUpdate: str = None
    CurrentUpdateDateTime: datetime = None
    CorridorIds: list[str] = field(default_factory=list)
    StartDateTime: datetime = None
    EndDateTime: datetime = None
    LastModifiedTime: datetime = None
    LevelOfInterest: str = None
    Location: str = None
    Status: str = None
    Geography: DbGeography = None
    Geometry: DbGeography = None
    Streets: list[Street] = field(default_factory=list)
    IsProvisional: bool = None
    HasClosures: bool = None
    LinkText: str = None
    LinkUrl: str = None
    RoadProject: RoadProject = None
    PublishStartDate: datetime = None
    PublishEndDate: datetime = None
    TimeFrame: str = None
    RoadDisruptionLines: list[RoadDisruptionLine] = field(default_factory=list)
    RoadDisruptionImpactAreas: list[RoadDisruptionImpactArea] = field(default_factory=list)
    RecurringSchedules: list[RoadDisruptionSchedule] = field(default_factory=list)
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Tfl-8', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class Object(JSONWizard):
    """
    Autogenerated from Road::System.Object
    """
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='System-3', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class StatusSeverity(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.StatusSeverity
    """
    ModeName: str = None
    SeverityLevel: int = None
    Description: str = None
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Tfl-9', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class Get200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Road::Get200ApplicationJsonResponse
    """
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='Get200ApplicationJsonResponse', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class idsGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Road::ids-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='ids-Get200ApplicationJsonResponse', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class idsStatusGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Road::ids-StatusGet200ApplicationJsonResponse
    """
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='ids-StatusGet200ApplicationJsonResponse', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class idsDisruptionGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Road::ids-DisruptionGet200ApplicationJsonResponse
    """
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='ids-DisruptionGet200ApplicationJsonResponse', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class MetaCategories(JSONWizard):
    """
    Autogenerated from Road::MetaCategoriesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='MetaCategoriesGet200ApplicationJsonResponse', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class MetaSeveritiesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Road::MetaSeveritiesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = field(default='Road', repr=False)
    _component_schema_name: str = field(default='MetaSeveritiesGet200ApplicationJsonResponse', repr=False)
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


class Deserialisers(DtoEnum):
    Tfl = RoadCorridor
    System = DbGeographyWellKnownValue
    System_2 = DbGeography
    Tfl_2 = StreetSegment
    Tfl_3 = Street
    Tfl_4 = RoadProject
    Tfl_5 = RoadDisruptionLine
    Tfl_6 = RoadDisruptionImpactArea
    Tfl_7 = RoadDisruptionSchedule
    Tfl_8 = RoadDisruption
    System_3 = Object
    Tfl_9 = StatusSeverity
    Get200ApplicationJsonResponse = Get200ApplicationJsonResponse
    ids_Get200ApplicationJsonResponse = idsGet200ApplicationJsonResponse
    ids_StatusGet200ApplicationJsonResponse = idsStatusGet200ApplicationJsonResponse
    ids_DisruptionGet200ApplicationJsonResponse = idsDisruptionGet200ApplicationJsonResponse
    MetaCategoriesGet200ApplicationJsonResponse = MetaCategories
    MetaSeveritiesGet200ApplicationJsonResponse = MetaSeveritiesGet200ApplicationJsonResponse