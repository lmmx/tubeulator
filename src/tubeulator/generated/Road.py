import json
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard
from dataclass_wizard.loaders import fromdict
import jsonschema

@dataclass
class RoadCorridorDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadCorridor
    """
    Id: str = None
    DisplayName: str = None
    Group: str = None
    StatusSeverity: str = None
    StatusSeverityDescription: str = None
    Bounds: str = None
    Envelope: str = None
    StatusAggregationStartDate: str = None
    StatusAggregationEndDate: str = None
    Url: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class DbGeographyWellKnownValueDeserialiser(JSONWizard):
    """
    Autogenerated from Road::System.Data.Spatial.DbGeographyWellKnownValue
    """
    CoordinateSystemId: int = None
    WellKnownText: str = None
    WellKnownBinary: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class DbGeographyDeserialiser(JSONWizard):
    """
    Autogenerated from Road::System.Data.Spatial.DbGeography
    """
    Geography: dict = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class StreetSegmentDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.StreetSegment
    """
    Toid: str = None
    LineString: str = None
    SourceSystemId: int = None
    SourceSystemKey: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class StreetDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.Street
    """
    Name: str = None
    Closure: str = None
    Directions: str = None
    Segments: list[dict] = field(default_factory=list)
    SourceSystemId: int = None
    SourceSystemKey: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class RoadProjectDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadProject
    """
    ProjectId: str = None
    SchemeName: str = None
    ProjectName: str = None
    ProjectDescription: str = None
    ProjectPageUrl: str = None
    ConsultationPageUrl: str = None
    ConsultationStartDate: str = None
    ConsultationEndDate: str = None
    ConstructionStartDate: str = None
    ConstructionEndDate: str = None
    BoroughsBenefited: list[str] = field(default_factory=list)
    CycleSuperhighwayId: str = None
    Phase: str = None
    ContactName: str = None
    ContactEmail: str = None
    ExternalPageUrl: str = None
    ProjectSummaryPageUrl: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class RoadDisruptionLineDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadDisruptionLine
    """
    Id: int = None
    RoadDisruptionId: str = None
    IsDiversion: bool = None
    MultiLineString: dict = None
    StartDate: str = None
    EndDate: str = None
    StartTime: str = None
    EndTime: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class RoadDisruptionImpactAreaDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadDisruptionImpactArea
    """
    Id: int = None
    RoadDisruptionId: str = None
    Polygon: dict = None
    StartDate: str = None
    EndDate: str = None
    StartTime: str = None
    EndTime: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class RoadDisruptionScheduleDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadDisruptionSchedule
    """
    StartTime: str = None
    EndTime: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class RoadDisruptionDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.RoadDisruption
    """
    Id: str = None
    Url: str = None
    Point: str = None
    Severity: str = None
    Ordinal: int = None
    Category: str = None
    SubCategory: str = None
    Comments: str = None
    CurrentUpdate: str = None
    CurrentUpdateDateTime: str = None
    CorridorIds: list[str] = field(default_factory=list)
    StartDateTime: str = None
    EndDateTime: str = None
    LastModifiedTime: str = None
    LevelOfInterest: str = None
    Location: str = None
    Status: str = None
    Geography: dict = None
    Geometry: dict = None
    Streets: list[dict] = field(default_factory=list)
    IsProvisional: bool = None
    HasClosures: bool = None
    LinkText: str = None
    LinkUrl: str = None
    RoadProject: dict = None
    PublishStartDate: str = None
    PublishEndDate: str = None
    TimeFrame: str = None
    RoadDisruptionLines: list[dict] = field(default_factory=list)
    RoadDisruptionImpactAreas: list[dict] = field(default_factory=list)
    RecurringSchedules: list[dict] = field(default_factory=list)
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class ObjectDeserialiser(JSONWizard):
    """
    Autogenerated from Road::System.Object
    """
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class StatusSeverityDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Tfl.Api.Presentation.Entities.StatusSeverity
    """
    ModeName: str = None
    SeverityLevel: int = None
    Description: str = None
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class Get200_or_idsGet200_or_idsStatusGet200ApplicationJsonResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Road::Get200ApplicationJsonResponse
    """
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class Get200_or_idsGet200_or_idsStatusGet200ApplicationJsonResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Road::ids-Get200ApplicationJsonResponse
    """
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class Get200_or_idsGet200_or_idsStatusGet200ApplicationJsonResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Road::ids-StatusGet200ApplicationJsonResponse
    """
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class idsDisruptionGet200ApplicationJsonResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Road::ids-DisruptionGet200ApplicationJsonResponse
    """
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class MetaCategoriesDeserialiser(JSONWizard):
    """
    Autogenerated from Road::MetaCategoriesGet200ApplicationJsonResponse
    """
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class MetaSeveritiesGet200ApplicationJsonResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Road::MetaSeveritiesGet200ApplicationJsonResponse
    """
    
    @classmethod
    def from_dict(cls, o):
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    @classmethod
    def Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True