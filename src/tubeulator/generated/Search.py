from __future__ import annotations
import json
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard
from dataclass_wizard.loaders import fromdict
import jsonschema
from ..utils.paths import load_endpoint_component_schemas, DtoEnum

@dataclass
class SearchMatch(JSONWizard):
    """
    Autogenerated from Search::Tfl.Api.Presentation.Entities.SearchMatch
    """
    Id: str = None
    Url: str = None
    Name: str = None
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'Search'
    _component_schema_name: str = 'Tfl'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class SearchResponse(JSONWizard):
    """
    Autogenerated from Search::Tfl.Api.Presentation.Entities.SearchResponse
    """
    Query: str = None
    From: int = None
    Page: int = None
    PageSize: int = None
    Provider: str = None
    Total: int = None
    Matches: list[SearchMatch] = field(default_factory=list)
    MaxScore: float = None
    _source_schema_name: str = 'Search'
    _component_schema_name: str = 'Tfl-2'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class MetaSearchProviders(JSONWizard):
    """
    Autogenerated from Search::MetaSearchProvidersGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Search'
    _component_schema_name: str = 'MetaSearchProvidersGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class MetaCategories(JSONWizard):
    """
    Autogenerated from Search::MetaCategoriesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Search'
    _component_schema_name: str = 'MetaCategoriesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class MetaSorts(JSONWizard):
    """
    Autogenerated from Search::MetaSortsGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Search'
    _component_schema_name: str = 'MetaSortsGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


class Deserialisers(DtoEnum):
    Tfl = SearchMatch
    Tfl_2 = SearchResponse
    MetaSearchProvidersGet200ApplicationJsonResponse = MetaSearchProviders
    MetaCategoriesGet200ApplicationJsonResponse = MetaCategories
    MetaSortsGet200ApplicationJsonResponse = MetaSorts