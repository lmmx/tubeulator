import json
from typing import Any
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard
from dataclass_wizard.loaders import fromdict
import jsonschema
from ..utils.paths import load_endpoint_component_schemas

@dataclass
class SearchMatchDeserialiser(JSONWizard):
    """
    Autogenerated from Search::Tfl.Api.Presentation.Entities.SearchMatch
    """
    Id: str = None
    Url: str = None
    Name: str = None
    Lat: Any = None
    Lon: Any = None
    __source_schema_name: str = 'Search'
    __component_schema_name: str = 'Tfl'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls.__source_schema_name)
        schema = parent_schema[cls.__component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class SearchResponseDeserialiser(JSONWizard):
    """
    Autogenerated from Search::Tfl.Api.Presentation.Entities.SearchResponse
    """
    Query: str = None
    From: int = None
    Page: int = None
    PageSize: int = None
    Provider: str = None
    Total: int = None
    Matches: list[dict] = field(default_factory=list)
    MaxScore: Any = None
    __source_schema_name: str = 'Search'
    __component_schema_name: str = 'Tfl-2'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls.__source_schema_name)
        schema = parent_schema[cls.__component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class MetaSearchProvidersDeserialiser(JSONWizard):
    """
    Autogenerated from Search::MetaSearchProvidersGet200ApplicationJsonResponse
    """
    __source_schema_name: str = 'Search'
    __component_schema_name: str = 'MetaSearchProvidersGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls.__source_schema_name)
        schema = parent_schema[cls.__component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class MetaCategoriesDeserialiser(JSONWizard):
    """
    Autogenerated from Search::MetaCategoriesGet200ApplicationJsonResponse
    """
    __source_schema_name: str = 'Search'
    __component_schema_name: str = 'MetaCategoriesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls.__source_schema_name)
        schema = parent_schema[cls.__component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True


@dataclass
class MetaSortsDeserialiser(JSONWizard):
    """
    Autogenerated from Search::MetaSortsGet200ApplicationJsonResponse
    """
    __source_schema_name: str = 'Search'
    __component_schema_name: str = 'MetaSortsGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls.__source_schema_name)
        schema = parent_schema[cls.__component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = "PASCAL"
        raise_on_unknown_json_key = True