from __future__ import annotations
import json
from datetime import datetime
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard
from dataclass_wizard.loaders import fromdict
import jsonschema
from ..utils.paths import load_endpoint_component_schemas, DtoEnum

@dataclass
class PredictionTiming(JSONWizard):
    """
    Autogenerated from Vehicle::Tfl.Api.Presentation.Entities.PredictionTiming
    """
    CountdownServerAdjustment: str = None
    Source: datetime = None
    Insert: datetime = None
    Read: datetime = None
    Sent: datetime = None
    Received: datetime = None
    _source_schema_name: str = field(default='Vehicle', repr=False)
    _component_schema_name: str = field(default='Tfl', repr=False)

    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)

    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class Prediction(JSONWizard):
    """
    Autogenerated from Vehicle::Tfl.Api.Presentation.Entities.Prediction
    """
    Id: str = None
    OperationType: int = None
    VehicleId: str = None
    NaptanId: str = None
    StationName: str = None
    LineId: str = None
    LineName: str = None
    PlatformName: str = None
    Direction: str = None
    Bearing: str = None
    DestinationNaptanId: str = None
    DestinationName: str = None
    Timestamp: datetime = None
    TimeToStation: int = None
    CurrentLocation: str = None
    Towards: str = None
    ExpectedArrival: datetime = None
    TimeToLive: datetime = None
    ModeName: str = None
    Timing: PredictionTiming = None
    _source_schema_name: str = field(default='Vehicle', repr=False)
    _component_schema_name: str = field(default='Tfl-2', repr=False)

    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)

    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class VehicleMatch(JSONWizard):
    """
    Autogenerated from Vehicle::Tfl.Api.Presentation.Entities.VehicleMatch
    """
    Vrm: str = None
    Type: str = None
    Make: str = None
    Model: str = None
    Colour: str = None
    Compliance: str = None
    _source_schema_name: str = field(default='Vehicle', repr=False)
    _component_schema_name: str = field(default='Tfl-3', repr=False)

    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)

    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


@dataclass
class idsArrivalsGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Vehicle::ids-ArrivalsGet200ApplicationJsonResponse
    """
    _source_schema_name: str = field(default='Vehicle', repr=False)
    _component_schema_name: str = field(default='ids-ArrivalsGet200ApplicationJsonResponse', repr=False)

    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)

    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'
        recursive_classes = True


class Deserialisers(DtoEnum):
    Tfl = PredictionTiming
    Tfl_2 = Prediction
    Tfl_3 = VehicleMatch
    ids_ArrivalsGet200ApplicationJsonResponse = idsArrivalsGet200ApplicationJsonResponse