from __future__ import annotations
import json
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard
from dataclass_wizard.loaders import fromdict
import jsonschema
from ..utils.paths import load_endpoint_component_schemas, DtoEnum

@dataclass
class Mode(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Mode
    """
    IsTflService: bool = None
    IsFarePaying: bool = None
    IsScheduledService: bool = None
    ModeName: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class StatusSeverity(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.StatusSeverity
    """
    ModeName: str = None
    SeverityLevel: int = None
    Description: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-2'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class PassengerFlow(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.PassengerFlow
    """
    TimeSlice: str = None
    Value: int = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-3'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TrainLoading(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.TrainLoading
    """
    Line: str = None
    LineDirection: str = None
    PlatformDirection: str = None
    Direction: str = None
    NaptanTo: str = None
    TimeSlice: str = None
    Value: int = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-4'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Crowding(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Crowding
    """
    PassengerFlows: list[PassengerFlow] = field(default_factory=list)
    TrainLoadings: list[TrainLoading] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-5'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Identifier(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Identifier
    """
    Id: str = None
    Name: str = None
    Uri: str = None
    FullName: str = None
    Type: str = None
    Crowding: dict = None
    RouteType: str = None
    Status: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-6'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineGroup(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.LineGroup
    """
    NaptanIdReference: str = None
    StationAtcoCode: str = None
    LineIdentifier: list[str] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-7'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineModeGroup(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.LineModeGroup
    """
    ModeName: str = None
    LineIdentifier: list[str] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-8'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class AdditionalProperties(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.AdditionalProperties
    """
    Category: str = None
    Key: str = None
    SourceSystemKey: str = None
    Value: str = None
    Modified: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-9'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Place(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Place
    """
    Id: str = None
    Url: str = None
    CommonName: str = None
    Distance: float = None
    PlaceType: str = None
    AdditionalProperties: list[AdditionalProperties] = field(default_factory=list)
    Children: list[Place] = field(default_factory=list)
    ChildrenUrls: list[str] = field(default_factory=list)
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-10'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class StopPoint(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.StopPoint
    """
    NaptanId: str = None
    PlatformName: str = None
    Indicator: str = None
    StopLetter: str = None
    Modes: list[str] = field(default_factory=list)
    IcsCode: str = None
    SmsCode: str = None
    StopType: str = None
    StationNaptan: str = None
    AccessibilitySummary: str = None
    HubNaptanCode: str = None
    Lines: list[Identifier] = field(default_factory=list)
    LineGroup: list[LineGroup] = field(default_factory=list)
    LineModeGroups: list[LineModeGroup] = field(default_factory=list)
    FullName: str = None
    NaptanMode: str = None
    Status: bool = None
    Id: str = None
    Url: str = None
    CommonName: str = None
    Distance: float = None
    PlaceType: str = None
    AdditionalProperties: list[AdditionalProperties] = field(default_factory=list)
    Children: list[Place] = field(default_factory=list)
    ChildrenUrls: list[str] = field(default_factory=list)
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-11'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class RouteSectionNaptanEntrySequence(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence
    """
    Ordinal: int = None
    StopPoint: dict = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-12'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class RouteSection(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.RouteSection
    """
    Id: str = None
    LineId: str = None
    RouteCode: str = None
    Name: str = None
    LineString: str = None
    Direction: str = None
    OriginationName: str = None
    DestinationName: str = None
    ValidTo: str = None
    ValidFrom: str = None
    RouteSectionNaptanEntrySequence: list[RouteSectionNaptanEntrySequence] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-13'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Disruption(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Disruption
    """
    Category: str = None
    Type: str = None
    CategoryDescription: str = None
    Description: str = None
    Summary: str = None
    AdditionalInfo: str = None
    Created: str = None
    LastUpdate: str = None
    AffectedRoutes: list[RouteSection] = field(default_factory=list)
    AffectedStops: list[StopPoint] = field(default_factory=list)
    ClosureText: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-14'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ValidityPeriod(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.ValidityPeriod
    """
    FromDate: str = None
    ToDate: str = None
    IsNow: bool = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-15'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineStatus(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.LineStatus
    """
    Id: int = None
    LineId: str = None
    StatusSeverity: int = None
    StatusSeverityDescription: str = None
    Reason: str = None
    Created: str = None
    Modified: str = None
    ValidityPeriods: list[ValidityPeriod] = field(default_factory=list)
    Disruption: dict = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-16'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MatchedRoute(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.MatchedRoute
    """
    RouteCode: str = None
    Name: str = None
    Direction: str = None
    OriginationName: str = None
    DestinationName: str = None
    Originator: str = None
    Destination: str = None
    ServiceType: str = None
    ValidTo: str = None
    ValidFrom: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-17'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineServiceTypeInfo(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.LineServiceTypeInfo
    """
    Name: str = None
    Uri: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-18'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Line(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Line
    """
    Id: str = None
    Name: str = None
    ModeName: str = None
    Disruptions: list[Disruption] = field(default_factory=list)
    Created: str = None
    Modified: str = None
    LineStatuses: list[LineStatus] = field(default_factory=list)
    RouteSections: list[MatchedRoute] = field(default_factory=list)
    ServiceTypes: list[LineServiceTypeInfo] = field(default_factory=list)
    Crowding: dict = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-19'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MatchedStop(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.MatchedStop
    """
    RouteId: int = None
    ParentId: str = None
    StationId: str = None
    IcsId: str = None
    TopMostParentId: str = None
    Direction: str = None
    Towards: str = None
    Modes: list[str] = field(default_factory=list)
    StopType: str = None
    StopLetter: str = None
    Zone: str = None
    AccessibilitySummary: str = None
    HasDisruption: bool = None
    Lines: list[Identifier] = field(default_factory=list)
    Status: bool = None
    Id: str = None
    Url: str = None
    Name: str = None
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-20'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class StopPointSequence(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.StopPointSequence
    """
    LineId: str = None
    LineName: str = None
    Direction: str = None
    BranchId: int = None
    NextBranchIds: list[int] = field(default_factory=list)
    PrevBranchIds: list[int] = field(default_factory=list)
    StopPoint: list[MatchedStop] = field(default_factory=list)
    ServiceType: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-21'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class OrderedRoute(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.OrderedRoute
    """
    Name: str = None
    NaptanIds: list[str] = field(default_factory=list)
    ServiceType: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-22'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class RouteSequence(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.RouteSequence
    """
    LineId: str = None
    LineName: str = None
    Direction: str = None
    IsOutboundOnly: bool = None
    Mode: str = None
    LineStrings: list[str] = field(default_factory=list)
    Stations: list[MatchedStop] = field(default_factory=list)
    StopPointSequences: list[StopPointSequence] = field(default_factory=list)
    OrderedLineRoutes: list[OrderedRoute] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-23'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineRouteSection(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.LineRouteSection
    """
    RouteId: int = None
    Direction: str = None
    Destination: str = None
    FromStation: str = None
    ToStation: str = None
    ServiceType: str = None
    VehicleDestinationText: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-24'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MatchedRouteSections(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.MatchedRouteSections
    """
    Id: int = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-25'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class RouteSearchMatch(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.RouteSearchMatch
    """
    LineId: str = None
    Mode: str = None
    LineName: str = None
    LineRouteSection: list[LineRouteSection] = field(default_factory=list)
    MatchedRouteSections: list[MatchedRouteSections] = field(default_factory=list)
    MatchedStops: list[MatchedStop] = field(default_factory=list)
    Id: str = None
    Url: str = None
    Name: str = None
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-26'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class RouteSearchResponse(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.RouteSearchResponse
    """
    Input: str = None
    SearchMatches: list[RouteSearchMatch] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-27'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Interval(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Interval
    """
    StopId: str = None
    TimeToArrival: float = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-28'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class StationInterval(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.StationInterval
    """
    Id: str = None
    Intervals: list[Interval] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-29'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class KnownJourney(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.KnownJourney
    """
    Hour: str = None
    Minute: str = None
    IntervalId: int = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-30'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TwentyFourHourClockTime(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.TwentyFourHourClockTime
    """
    Hour: str = None
    Minute: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-31'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ServiceFrequency(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.ServiceFrequency
    """
    LowestFrequency: float = None
    HighestFrequency: float = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-32'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Period(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Period
    """
    Type: str = None
    FromTime: dict = None
    ToTime: dict = None
    Frequency: dict = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-33'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Schedule(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Schedule
    """
    Name: str = None
    KnownJourneys: list[KnownJourney] = field(default_factory=list)
    FirstJourney: dict = None
    LastJourney: dict = None
    Periods: list[Period] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-34'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TimetableRoute(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.TimetableRoute
    """
    StationIntervals: list[StationInterval] = field(default_factory=list)
    Schedules: list[Schedule] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-35'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Timetable(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Timetable
    """
    DepartureStopId: str = None
    Routes: list[TimetableRoute] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-36'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class DisambiguationOption(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Timetables.DisambiguationOption
    """
    Description: str = None
    Uri: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-37'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Disambiguation(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Timetables.Disambiguation
    """
    DisambiguationOptions: list[DisambiguationOption] = field(default_factory=list)
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-38'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TimetableResponse(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.TimetableResponse
    """
    LineId: str = None
    LineName: str = None
    Direction: str = None
    PdfUrl: str = None
    Stations: list[MatchedStop] = field(default_factory=list)
    Stops: list[MatchedStop] = field(default_factory=list)
    Timetable: dict = None
    Disambiguation: dict = None
    StatusErrorMessage: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-39'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class PredictionTiming(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.PredictionTiming
    """
    CountdownServerAdjustment: str = None
    Source: str = None
    Insert: str = None
    Read: str = None
    Sent: str = None
    Received: str = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-40'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Prediction(JSONWizard):
    """
    Autogenerated from Line::Tfl.Api.Presentation.Entities.Prediction
    """
    Id: str = None
    OperationType: int = None
    VehicleId: str = None
    NaptanId: str = None
    StationName: str = None
    LineId: str = None
    LineName: str = None
    PlatformName: str = None
    Direction: str = None
    Bearing: str = None
    DestinationNaptanId: str = None
    DestinationName: str = None
    Timestamp: str = None
    TimeToStation: int = None
    CurrentLocation: str = None
    Towards: str = None
    ExpectedArrival: str = None
    TimeToLive: str = None
    ModeName: str = None
    Timing: dict = None
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Tfl-41'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MetaModesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::MetaModesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'MetaModesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Get200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MetaSeverityGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::MetaSeverityGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'MetaSeverityGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MetaDisruptionCategories(JSONWizard):
    """
    Autogenerated from Line::MetaDisruptionCategoriesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'MetaDisruptionCategoriesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MetaServiceTypes(JSONWizard):
    """
    Autogenerated from Line::MetaServiceTypesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'MetaServiceTypesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idsGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::ids-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'ids-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ModemodesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::Mode-modes-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Mode-modes-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class RouteGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::RouteGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'RouteGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idsRouteGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::ids-RouteGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'ids-RouteGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ModemodesRouteGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::Mode-modes-RouteGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Mode-modes-RouteGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idsStatusstartDateToendDateGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::ids-Status-startDate-To-endDate-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'ids-Status-startDate-To-endDate-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idsStatusGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::ids-StatusGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'ids-StatusGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class StatusseverityGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::Status-severity-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Status-severity-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ModemodesStatusGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::Mode-modes-StatusGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Mode-modes-StatusGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idStopPointsGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::id-StopPointsGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'id-StopPointsGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idsDisruptionGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::ids-DisruptionGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'ids-DisruptionGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ModemodesDisruptionGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::Mode-modes-DisruptionGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'Mode-modes-DisruptionGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idsArrivalsstopPointIdGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::ids-Arrivals-stopPointId-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'ids-Arrivals-stopPointId-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idsArrivalsGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from Line::ids-ArrivalsGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'Line'
    _component_schema_name: str = 'ids-ArrivalsGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


class Deserialisers(DtoEnum):
    Tfl = Mode
    Tfl_2 = StatusSeverity
    Tfl_3 = PassengerFlow
    Tfl_4 = TrainLoading
    Tfl_5 = Crowding
    Tfl_6 = Identifier
    Tfl_7 = LineGroup
    Tfl_8 = LineModeGroup
    Tfl_9 = AdditionalProperties
    Tfl_10 = Place
    Tfl_11 = StopPoint
    Tfl_12 = RouteSectionNaptanEntrySequence
    Tfl_13 = RouteSection
    Tfl_14 = Disruption
    Tfl_15 = ValidityPeriod
    Tfl_16 = LineStatus
    Tfl_17 = MatchedRoute
    Tfl_18 = LineServiceTypeInfo
    Tfl_19 = Line
    Tfl_20 = MatchedStop
    Tfl_21 = StopPointSequence
    Tfl_22 = OrderedRoute
    Tfl_23 = RouteSequence
    Tfl_24 = LineRouteSection
    Tfl_25 = MatchedRouteSections
    Tfl_26 = RouteSearchMatch
    Tfl_27 = RouteSearchResponse
    Tfl_28 = Interval
    Tfl_29 = StationInterval
    Tfl_30 = KnownJourney
    Tfl_31 = TwentyFourHourClockTime
    Tfl_32 = ServiceFrequency
    Tfl_33 = Period
    Tfl_34 = Schedule
    Tfl_35 = TimetableRoute
    Tfl_36 = Timetable
    Tfl_37 = DisambiguationOption
    Tfl_38 = Disambiguation
    Tfl_39 = TimetableResponse
    Tfl_40 = PredictionTiming
    Tfl_41 = Prediction
    MetaModesGet200ApplicationJsonResponse = MetaModesGet200ApplicationJsonResponse
    Get200ApplicationJsonResponse = Get200ApplicationJsonResponse
    MetaSeverityGet200ApplicationJsonResponse = MetaSeverityGet200ApplicationJsonResponse
    MetaDisruptionCategoriesGet200ApplicationJsonResponse = MetaDisruptionCategories
    MetaServiceTypesGet200ApplicationJsonResponse = MetaServiceTypes
    ids_Get200ApplicationJsonResponse = idsGet200ApplicationJsonResponse
    Mode_modes_Get200ApplicationJsonResponse = ModemodesGet200ApplicationJsonResponse
    RouteGet200ApplicationJsonResponse = RouteGet200ApplicationJsonResponse
    ids_RouteGet200ApplicationJsonResponse = idsRouteGet200ApplicationJsonResponse
    Mode_modes_RouteGet200ApplicationJsonResponse = ModemodesRouteGet200ApplicationJsonResponse
    ids_Status_startDate_To_endDate_Get200ApplicationJsonResponse = idsStatusstartDateToendDateGet200ApplicationJsonResponse
    ids_StatusGet200ApplicationJsonResponse = idsStatusGet200ApplicationJsonResponse
    Status_severity_Get200ApplicationJsonResponse = StatusseverityGet200ApplicationJsonResponse
    Mode_modes_StatusGet200ApplicationJsonResponse = ModemodesStatusGet200ApplicationJsonResponse
    id_StopPointsGet200ApplicationJsonResponse = idStopPointsGet200ApplicationJsonResponse
    ids_DisruptionGet200ApplicationJsonResponse = idsDisruptionGet200ApplicationJsonResponse
    Mode_modes_DisruptionGet200ApplicationJsonResponse = ModemodesDisruptionGet200ApplicationJsonResponse
    ids_Arrivals_stopPointId_Get200ApplicationJsonResponse = idsArrivalsstopPointIdGet200ApplicationJsonResponse
    ids_ArrivalsGet200ApplicationJsonResponse = idsArrivalsGet200ApplicationJsonResponse