import json
from dataclasses import dataclass, field
from pathlib import Path
from dataclass_wizard import JSONWizard
from dataclass_wizard.loaders import fromdict
import jsonschema
from ..utils.paths import load_endpoint_component_schemas, DtoEnum

@dataclass
class PlaceCategory(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.PlaceCategory
    """
    Category: str = None
    AvailableKeys: list[str] = field(default_factory=list)
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Mode(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.Mode
    """
    IsTflService: bool = None
    IsFarePaying: bool = None
    IsScheduledService: bool = None
    ModeName: str = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-2'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class PassengerFlow(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.PassengerFlow
    """
    TimeSlice: str = None
    Value: int = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-3'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TrainLoading(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.TrainLoading
    """
    Line: str = None
    LineDirection: str = None
    PlatformDirection: str = None
    Direction: str = None
    NaptanTo: str = None
    TimeSlice: str = None
    Value: int = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-4'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Crowding(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.Crowding
    """
    PassengerFlows: list[dict] = field(default_factory=list)
    TrainLoadings: list[dict] = field(default_factory=list)
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-5'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Identifier(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.Identifier
    """
    Id: str = None
    Name: str = None
    Uri: str = None
    FullName: str = None
    Type: str = None
    Crowding: dict = None
    RouteType: str = None
    Status: str = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-6'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineGroup(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.LineGroup
    """
    NaptanIdReference: str = None
    StationAtcoCode: str = None
    LineIdentifier: list[str] = field(default_factory=list)
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-7'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineModeGroup(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.LineModeGroup
    """
    ModeName: str = None
    LineIdentifier: list[str] = field(default_factory=list)
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-8'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class AdditionalProperties(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.AdditionalProperties
    """
    Category: str = None
    Key: str = None
    SourceSystemKey: str = None
    Value: str = None
    Modified: str = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-9'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Place(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.Place
    """
    Id: str = None
    Url: str = None
    CommonName: str = None
    Distance: float = None
    PlaceType: str = None
    AdditionalProperties: list[dict] = field(default_factory=list)
    Children: list[dict] = field(default_factory=list)
    ChildrenUrls: list[str] = field(default_factory=list)
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-10'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class StopPoint(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.StopPoint
    """
    NaptanId: str = None
    PlatformName: str = None
    Indicator: str = None
    StopLetter: str = None
    Modes: list[str] = field(default_factory=list)
    IcsCode: str = None
    SmsCode: str = None
    StopType: str = None
    StationNaptan: str = None
    AccessibilitySummary: str = None
    HubNaptanCode: str = None
    Lines: list[dict] = field(default_factory=list)
    LineGroup: list[dict] = field(default_factory=list)
    LineModeGroups: list[dict] = field(default_factory=list)
    FullName: str = None
    NaptanMode: str = None
    Status: bool = None
    Id: str = None
    Url: str = None
    CommonName: str = None
    Distance: float = None
    PlaceType: str = None
    AdditionalProperties: list[dict] = field(default_factory=list)
    Children: list[dict] = field(default_factory=list)
    ChildrenUrls: list[str] = field(default_factory=list)
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-11'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineServiceTypeInfo(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.LineServiceTypeInfo
    """
    Name: str = None
    Uri: str = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-12'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineSpecificServiceType(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.LineSpecificServiceType
    """
    ServiceType: dict = None
    StopServesServiceType: bool = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-13'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class LineServiceType(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.LineServiceType
    """
    LineName: str = None
    LineSpecificServiceTypes: list[dict] = field(default_factory=list)
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-14'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class PredictionTiming(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.PredictionTiming
    """
    CountdownServerAdjustment: str = None
    Source: str = None
    Insert: str = None
    Read: str = None
    Sent: str = None
    Received: str = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-15'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Prediction(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.Prediction
    """
    Id: str = None
    OperationType: int = None
    VehicleId: str = None
    NaptanId: str = None
    StationName: str = None
    LineId: str = None
    LineName: str = None
    PlatformName: str = None
    Direction: str = None
    Bearing: str = None
    DestinationNaptanId: str = None
    DestinationName: str = None
    Timestamp: str = None
    TimeToStation: int = None
    CurrentLocation: str = None
    Towards: str = None
    ExpectedArrival: str = None
    TimeToLive: str = None
    ModeName: str = None
    Timing: dict = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-16'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ArrivalDeparture(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.ArrivalDeparture
    """
    PlatformName: str = None
    DestinationNaptanId: str = None
    DestinationName: str = None
    NaptanId: str = None
    StationName: str = None
    EstimatedTimeOfArrival: str = None
    ScheduledTimeOfArrival: str = None
    EstimatedTimeOfDeparture: str = None
    ScheduledTimeOfDeparture: str = None
    MinutesAndSecondsToArrival: str = None
    MinutesAndSecondsToDeparture: str = None
    Cause: str = None
    DepartureStatus: str = None
    Timing: dict = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-17'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class StopPointRouteSection(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.StopPointRouteSection
    """
    NaptanId: str = None
    LineId: str = None
    Mode: str = None
    ValidFrom: str = None
    ValidTo: str = None
    Direction: str = None
    RouteSectionName: str = None
    LineString: str = None
    IsActive: bool = None
    ServiceType: str = None
    VehicleDestinationText: str = None
    DestinationName: str = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-18'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class DisruptedPoint(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.DisruptedPoint
    """
    AtcoCode: str = None
    FromDate: str = None
    ToDate: str = None
    Description: str = None
    CommonName: str = None
    Type: str = None
    Mode: str = None
    StationAtcoCode: str = None
    Appearance: str = None
    AdditionalInformation: str = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-19'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class StopPointsResponse(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.StopPointsResponse
    """
    CentrePoint: list[float] = field(default_factory=list)
    StopPoints: list[dict] = field(default_factory=list)
    PageSize: int = None
    Total: int = None
    Page: int = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-20'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class SearchMatch(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.SearchMatch
    """
    Id: str = None
    Url: str = None
    Name: str = None
    Lat: float = None
    Lon: float = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-21'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class SearchResponse(JSONWizard):
    """
    Autogenerated from StopPoint::Tfl.Api.Presentation.Entities.SearchResponse
    """
    Query: str = None
    From: int = None
    Page: int = None
    PageSize: int = None
    Provider: str = None
    Total: int = None
    Matches: list[dict] = field(default_factory=list)
    MaxScore: float = None
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Tfl-22'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Object(JSONWizard):
    """
    Autogenerated from StopPoint::System.Object
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'System'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class Get200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MetaCategoriesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::MetaCategoriesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'MetaCategoriesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MetaStopTypes(JSONWizard):
    """
    Autogenerated from StopPoint::MetaStopTypesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'MetaStopTypesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class MetaModesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::MetaModesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'MetaModesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idsGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::ids-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'ids-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idPlaceTypesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::id-PlaceTypesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'id-PlaceTypesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idCrowdinglineGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::id-Crowding-line-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'id-Crowding-line-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TypetypesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::Type-types-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Type-types-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class TypetypesPagepageGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::Type-types-Page-page-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Type-types-Page-page-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ServiceTypesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::ServiceTypesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'ServiceTypesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idArrivalsGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::id-ArrivalsGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'id-ArrivalsGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idArrivalDeparturesGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::id-ArrivalDeparturesGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'id-ArrivalDeparturesGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idCanReachOnLinelineIdGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::id-CanReachOnLine-lineId-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'id-CanReachOnLine-lineId-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idRouteGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::id-RouteGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'id-RouteGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class ModemodesDisruptionGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::Mode-modes-DisruptionGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'Mode-modes-DisruptionGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idsDisruptionGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::ids-DisruptionGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'ids-DisruptionGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class idDirectionTotoStopPointIdGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::id-DirectionTo-toStopPointId-Get200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'id-DirectionTo-toStopPointId-Get200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class stopPointIdTaxiRanksGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::stopPointId-TaxiRanksGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'stopPointId-TaxiRanksGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


@dataclass
class stopPointIdCarParksGet200ApplicationJsonResponse(JSONWizard):
    """
    Autogenerated from StopPoint::stopPointId-CarParksGet200ApplicationJsonResponse
    """
    _source_schema_name: str = 'StopPoint'
    _component_schema_name: str = 'stopPointId-CarParksGet200ApplicationJsonResponse'
    
    @classmethod
    def from_dict(cls, o):
        parent_schema = load_endpoint_component_schemas(cls._source_schema_name)
        schema = parent_schema[cls._component_schema_name]
        jsonschema.validate(o, schema)
        return fromdict(cls, o)
    
    class Meta(JSONWizard.Meta):
        key_transform_with_load = 'PASCAL'


class Deserialisers(DtoEnum):
    Tfl = PlaceCategory
    Tfl_2 = Mode
    Tfl_3 = PassengerFlow
    Tfl_4 = TrainLoading
    Tfl_5 = Crowding
    Tfl_6 = Identifier
    Tfl_7 = LineGroup
    Tfl_8 = LineModeGroup
    Tfl_9 = AdditionalProperties
    Tfl_10 = Place
    Tfl_11 = StopPoint
    Tfl_12 = LineServiceTypeInfo
    Tfl_13 = LineSpecificServiceType
    Tfl_14 = LineServiceType
    Tfl_15 = PredictionTiming
    Tfl_16 = Prediction
    Tfl_17 = ArrivalDeparture
    Tfl_18 = StopPointRouteSection
    Tfl_19 = DisruptedPoint
    Tfl_20 = StopPointsResponse
    Tfl_21 = SearchMatch
    Tfl_22 = SearchResponse
    System = Object
    Get200ApplicationJsonResponse = Get200ApplicationJsonResponse
    MetaCategoriesGet200ApplicationJsonResponse = MetaCategoriesGet200ApplicationJsonResponse
    MetaStopTypesGet200ApplicationJsonResponse = MetaStopTypes
    MetaModesGet200ApplicationJsonResponse = MetaModesGet200ApplicationJsonResponse
    ids_Get200ApplicationJsonResponse = idsGet200ApplicationJsonResponse
    id_PlaceTypesGet200ApplicationJsonResponse = idPlaceTypesGet200ApplicationJsonResponse
    id_Crowding_line_Get200ApplicationJsonResponse = idCrowdinglineGet200ApplicationJsonResponse
    Type_types_Get200ApplicationJsonResponse = TypetypesGet200ApplicationJsonResponse
    Type_types_Page_page_Get200ApplicationJsonResponse = TypetypesPagepageGet200ApplicationJsonResponse
    ServiceTypesGet200ApplicationJsonResponse = ServiceTypesGet200ApplicationJsonResponse
    id_ArrivalsGet200ApplicationJsonResponse = idArrivalsGet200ApplicationJsonResponse
    id_ArrivalDeparturesGet200ApplicationJsonResponse = idArrivalDeparturesGet200ApplicationJsonResponse
    id_CanReachOnLine_lineId_Get200ApplicationJsonResponse = idCanReachOnLinelineIdGet200ApplicationJsonResponse
    id_RouteGet200ApplicationJsonResponse = idRouteGet200ApplicationJsonResponse
    Mode_modes_DisruptionGet200ApplicationJsonResponse = ModemodesDisruptionGet200ApplicationJsonResponse
    ids_DisruptionGet200ApplicationJsonResponse = idsDisruptionGet200ApplicationJsonResponse
    id_DirectionTo_toStopPointId_Get200ApplicationJsonResponse = idDirectionTotoStopPointIdGet200ApplicationJsonResponse
    stopPointId_TaxiRanksGet200ApplicationJsonResponse = stopPointIdTaxiRanksGet200ApplicationJsonResponse
    stopPointId_CarParksGet200ApplicationJsonResponse = stopPointIdCarParksGet200ApplicationJsonResponse